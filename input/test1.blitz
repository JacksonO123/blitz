struct Car {
  size: u32;
}

struct [T: Car] name {
  value1: bool;
  value2: T;
  pub static fn create(value1: bool, value2: T) name<T> {
    return name<T> {
      value1 = !value1,
      value2
    };
  }
  prot fn someFunc() u32 {
    return 2;
  }
  pub fn test() {
    self.someFunc();
  }
}

fn b(p0: name<Car>, p1: bool, p2: string, p3: u32) char {
  return 'b';
}

// both throws error (should throw error)
// let n: name<u32> = name.create(true, Car { size = 10 });
// let n = name.create(true, 2);

let a = Car { size = 10 };
let n: name<Car> = name.create(true, a);
n.test();

// let h = b(n, true, "thing", 2);
